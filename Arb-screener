import streamlit as st
import pandas as pd
import datetime as dt

# ----------------------------
# Load NSE Bhavcopy (CSV)
# ----------------------------
# NSE publishes daily EOD bhavcopy for equities & derivatives
# Example: https://www.nseindia.com/all-reports-derivatives
# For demo, assume we have uploaded bhavcopy CSVs in same repo
# eq_bhav.csv  = equity spot prices
# fo_bhav.csv  = futures prices

@st.cache_data
def load_data():
    eq = pd.read_csv("eq_bhav.csv")   # equity EOD
    fo = pd.read_csv("fo_bhav.csv")   # futures EOD
    return eq, fo

st.set_page_config(page_title="Cash-Futures Arbitrage Screener", layout="wide")
st.title("ðŸ“Š Cashâ€“Futures Arbitrage Screener (EOD Data)")

today = dt.date.today()
st.write(f"**Date:** {today}")

eq, fo = load_data()

# Filter near-month futures only
near_month = fo.groupby("SYMBOL")["EXPIRY_DT"].min().reset_index()
fo = fo.merge(near_month, on=["SYMBOL","EXPIRY_DT"])

results = []

for s in eq["SYMBOL"].unique():
    try:
        spot_price = eq.loc[eq["SYMBOL"] == s, "CLOSE_PRICE"].values[0]
        fut_price  = fo.loc[fo["SYMBOL"] == s, "CLOSE"].values[0]

        expiry = pd.to_datetime(fo.loc[fo["SYMBOL"] == s, "EXPIRY_DT"].values[0]).date()
        days_to_expiry = max(1, (expiry - today).days)

        arb_yield = ((fut_price - spot_price) / spot_price) * (365 / days_to_expiry) * 100

        results.append({
            "Stock": s,
            "Spot": round(spot_price, 2),
            "Futures": round(fut_price, 2),
            "ArbYield%": round(arb_yield, 2)
        })
    except:
        continue

if results:
    df = pd.DataFrame(results).sort_values(by="ArbYield%", ascending=False)
    st.dataframe(df, use_container_width=True)
else:
    st.warning("Upload bhavcopy CSV files (eq_bhav.csv and fo_bhav.csv) to repo.")
